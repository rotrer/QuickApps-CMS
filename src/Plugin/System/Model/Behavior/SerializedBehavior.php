<?php
/**
 * Licensed under The GPL-3.0 License
 * For full copyright and license information, please see the LICENSE.txt
 * Redistributions of files must retain the above copyright notice.
 *
 * @version	 2.0
 * @since	 1.0
 * @author	 Christopher Castro <chris@quickapps.es>
 * @link	 http://www.quickappscms.org
 */
namespace QuickApps\System\Model\Behavior;
use Cake\ORM\Behavior;
use Cake\Event\Event;
use Cake\ORM\Table;
use Cake\ORM\Entity;

/**
 * # Serialized Behavior
 *
 * Allow entities to store arrays of information.
 *
 * ## Usage:
 *
 *     // single field
 *     TableRegistry('TableName')->addBehavior('System.Serialized', 'column_1');
 *
 *     // multiple fields
 *     TableRegistry('TableName')->addBehavior(
 *        'System.Serialized',
 *        [
 *            'fields' => [
 *                'column_1',
 *                'column_2',
 *                ...
 *            ]
 *        ]
 *     );
 */
class SerializedBehavior extends Behavior {
/**
 * List of fields to serialize.
 *
 * @var array
 */
	protected $_config = array(
		'fields' => []
	);

/**
 * Table which this behavior is attached to.
 *
 * @var Table
 */
	protected $_table;

/**
 * Class constructor.
 *
 * @param Table $table The table this behavior is attached to
 * @param array|string $config Configuration array for this behavior. Or string
 * for serialize a single field.
 * @return void
 */
	public function __construct(Table $table, $config = []) {
		if (is_string($config)) {
			$config = array('fields' => $config);
		}

		$this->_config = array_merge($this->_config, $config);
		$this->_table = $table;
	}

/**
 * Unserialize all the fields for each entity.
 *
 * @param Event $event The `beforeFind` event that was fired
 * @param Query $query The original query to modify
 * @return void
 */
	public function beforeFind(Event $event, $query) {
		$tableFields = $this->_table->schema()->columns();

		$query->formatResults(function($results) use ($tableFields) {
			return $results->map(function($row) use ($tableFields) {
				foreach ($this->_config as $field) {
					// ONLY REAL COLUMNS (from table schema) are serializable.
					// We skip virtual fields, or those generated by other behaviors
					// such as `FieldableBehavior`
					if (in_array($field, $tableFields) && $row->has($field)) {
						$value = $row->get($field);
						$row->set($field, $this->__unserialize($value), ['guard' => false]);
					}
				}

				return $row;
			});
		});
	}

/**
 * Before save callback.
 *
 * @param Event $event The `beforeSave` event that was fired
 * @param Entity $entity The table entity to modify
 * @return void
 */
	public function beforeSave(Event $event, Entity $entity) {
		foreach ($this->_config as $field) {
			if ($entity->has($field)) {
				$value = $entity->get($field);
				$entity->set($field, $this->__serialize($value));
			}
		}
	}

/**
 * Unserializes the given string.
 *
 * @param string $serialized Serialized string to unserialize
 * @return array The unserialized string
 */
	private function __unserialize($serialized) {
		$value = @unserialize($serialized);
		$value = is_array($value) && !empty($value) ? $value : [];

		return $value;
	}

/**
 * Serializes the given array.
 *
 * @param array $data Array to serialize
 * @return string The serialized array
 */
	private function __serialize($data) {
		if (!is_array($data)) {
			$data = [];
		}

		$value = @serialize($data);

		return (string)$value;
	}
}